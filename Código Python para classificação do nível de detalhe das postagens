import tkinter as tk
from tkinter import filedialog
import pandas as pd
import re
import os

def classify_3(text: str) -> str:
    text_lower = str(text).lower()
    money_flag = ("r$" in text_lower) or ("milhão" in text_lower) or ("milhões" in text_lower)
    numeric_flag = bool(re.search(r'\d+', text_lower))

    if money_flag:
        return "Alto detalhe"
    elif numeric_flag:
        return "Médio detalhe"
    else:
        return "Baixo detalhe"

def classify_5_original(text: str) -> str:
    text_lower = str(text).lower()
    money_flag = ("r$" in text_lower) or ("milhão" in text_lower) or ("milhões" in text_lower)
    tech_pattern = r'(m2|m²|\bkm\b|metros|canaleta|ciclovia|ciclofaixa|pavimenta|muro de arrimo)'
    tech_flag = bool(re.search(tech_pattern, text_lower))
    time_flag = bool(re.search(r'\b20[0-9]{2}\b', text_lower)) or ("desde" in text_lower)
    numeric_flag = bool(re.search(r'\d+', text_lower))

    if money_flag:
        if tech_flag and time_flag:
            return "Nível 1 (Extremo Detalhe)"
        elif tech_flag or time_flag:
            return "Nível 2 (Alto Detalhe)"
        else:
            return "Nível 3 (Detalhe Moderado/Médio)"
    else:
        if tech_flag and time_flag:
            return "Nível 3 (Detalhe Moderado/Médio)"
        elif numeric_flag:
            return "Nível 4 (Baixo Detalhe Intermediário)"
        else:
            return "Nível 5 (Mínimo ou Genérico)"

def classify_5_inverted(text: str) -> str:
    text_lower = str(text).lower()
    money_flag = ("r$" in text_lower) or ("milhão" in text_lower) or ("milhões" in text_lower)
    tech_pattern = r'(m2|m²|\bkm\b|metros|canaleta|ciclovia|ciclofaixa|pavimenta|muro de arrimo)'
    tech_flag = bool(re.search(tech_pattern, text_lower))
    time_flag = bool(re.search(r'\b20[0-9]{2}\b', text_lower)) or ("desde" in text_lower)
    numeric_flag = bool(re.search(r'\d+', text_lower))

    if money_flag:
        if tech_flag and time_flag:
            return "Nível 5 (Extremo Detalhe)"
        elif tech_flag or time_flag:
            return "Nível 4 (Alto Detalhe)"
        else:
            return "Nível 3 (Detalhe Moderado/Médio)"
    else:
        if tech_flag and time_flag:
            return "Nível 3 (Detalhe Moderado/Médio)"
        elif numeric_flag:
            return "Nível 2 (Baixo Detalhe Intermediário)"
        else:
            return "Nível 1 (Mínimo ou Genérico)"

def main():
    root = tk.Tk()
    root.withdraw()

    
    print("Diretório de trabalho atual:", os.getcwd())

    file_path = filedialog.askopenfilename(
        title="Selecione o arquivo XLS ou XLSX",
        filetypes=[("Planilhas Excel", "*.xls *.xlsx")]
    )
    if not file_path:
        print("Nenhum arquivo selecionado. Encerrando.")
        return

    print(f"Arquivo selecionado: {file_path}")

    df = pd.read_excel(file_path, usecols="A", header=0)
    df.columns = ["Message"]

    df["Classificação_3_níveis"] = df["Message"].apply(classify_3)
    df["Classificação_5_níveis_original"] = df["Message"].apply(classify_5_original)
    df["Classificação_5_níveis_invertida"] = df["Message"].apply(classify_5_inverted)

    folder_out = os.path.dirname(file_path)  
    output_file = os.path.join(folder_out, "DETALHAMENTO_classificado.xlsx")

    df.to_excel(output_file, index=False)

    print(f"Classificação concluída!\nArquivo salvo em:\n{output_file}")

if __name__ == "__main__":
    main()
